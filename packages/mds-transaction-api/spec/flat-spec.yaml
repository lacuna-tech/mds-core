openapi: 3.0.2
info:
  title: MDS Transaction API
  version: "1.0"
servers:
  - url: https://api.server.test/v1
paths:
  /transaction:
    post:
      summary: Create a Transaction
      tags:
        - Transactions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $schema: http://json-schema.org/draft-07/schema#
              type: object
              properties:
                transaction_id:
                  type: string
                  format: uuid
                provider_id:
                  type: string
                  format: uuid
                device_id:
                  type: string
                  format: uuid
                  nullable: true
                timestamp:
                  type: integer
                  minimum: 100000000000
                  maximum: 99999999999999
                fee_type:
                  type: string
                  enum:
                    - base_fee
                    - upgrade_fee
                    - congestion_fee
                    - trip_fee
                    - parking_fee
                    - reservation_fee
                    - distance_fee
                    - tolls_fee
                amount:
                  type: integer
                receipt:
                  $schema: http://json-schema.org/draft-07/schema#
                  type: object
                  properties:
                    receipt_id:
                      type: string
                      format: uuid
                    timestamp:
                      type: integer
                      minimum: 100000000000
                      maximum: 99999999999999
                    origin_url:
                      type: string
                      format: url
                    receipt_details:
                      type: object
                  required:
                    - origin_url
                    - receipt_details
                    - receipt_id
                    - timestamp
              required:
                - amount
                - device_id
                - fee_type
                - provider_id
                - receipt
                - timestamp
                - transaction_id
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    $ref: "#/components/schemas/Version"
                  transaction:
                    $ref: "#/paths/~1transaction/post/requestBody/content/application~1json/schema"
        "400":
          description: BAD_REQUEST
        "409":
          description: CONFLICT
        "500":
          description: SERVER_ERROR
        "503":
          description: SERVICE_UNAVAILABLE
  /transactions:
    get:
      summary: Get a collection of Transactions
      tags:
        - Transactions
      parameters:
        - in: query
          name: order_column
          schema:
            type: string
            enum:
              - timestamp
        - in: query
          name: order_direction
          schema:
            type: string
            enum:
              - ASC
              - DESC
        - in: query
          name: provider_id
          schema:
            type: string
            format: uuid
        - in: query
          name: before
          schema:
            type: string
            format: byte
        - in: query
          name: after
          schema:
            type: string
            format: byte
        - in: query
          name: start_timestamp
          schema:
            $ref: "#/components/schemas/Timestamp"
        - in: query
          name: end_timestamp
          schema:
            $ref: "#/components/schemas/Timestamp"
        - in: query
          name: limit
          schema:
            type: number
            format: i64
            default: 10
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    $ref: "#/components/schemas/Version"
                  links:
                    type: object
                    properties:
                      prev:
                        type: string
                        format: url
                        nullable: true
                      next:
                        type: string
                        format: url
                        nullable: true
                  transactions:
                    type: array
                    items:
                      $ref: "#/paths/~1transaction/post/requestBody/content/application~1json/schema"
        "404":
          description: NOT_FOUND
        "500":
          description: SERVER_ERROR
        "503":
          description: SERVICE_UNAVAILABLE
    post:
      summary: Create a collection of Transactions
      tags:
        - Transactions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/paths/~1transaction/post/requestBody/content/application~1json/schema"
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    $ref: "#/components/schemas/Version"
                  transactions:
                    type: array
                    items:
                      $ref: "#/paths/~1transaction/post/requestBody/content/application~1json/schema"
        "400":
          description: BAD_REQUEST
        "409":
          description: CONFLICT
        "500":
          description: SERVER_ERROR
        "503":
          description: SERVICE_UNAVAILABLE
  "/transactions/{transaction_id}":
    get:
      summary: Get a transaction
      tags:
        - Transactions
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    $ref: "#/components/schemas/Version"
                  transaction:
                    $ref: "#/paths/~1transaction/post/requestBody/content/application~1json/schema"
        "404":
          description: NOT_FOUND
        "500":
          description: SERVER_ERROR
        "503":
          description: SERVICE_UNAVAILABLE
  "/transactions/{transaction_id}/operations":
    get:
      summary: Get a transaction's operations
      tags:
        - Operations
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    $ref: "#/components/schemas/Version"
                  operations:
                    type: array
                    items:
                      $schema: http://json-schema.org/draft-07/schema#
                      type: object
                      properties:
                        transaction_id:
                          type: string
                          format: uuid
                        operation_id:
                          type: string
                          format: uuid
                        timestamp:
                          type: integer
                          minimum: 100000000000
                          maximum: 99999999999999
                        operation_type:
                          type: string
                          enum:
                            - transaction_posted
                            - invoice_generated
                            - dispute_requested
                            - dispute_approved
                            - dispute_declined
                            - dispute_canceled
                        author:
                          type: string
                      required:
                        - author
                        - operation_id
                        - operation_type
                        - timestamp
                        - transaction_id
        "404":
          description: NOT_FOUND
        "500":
          description: SERVER_ERROR
        "503":
          description: SERVICE_UNAVAILABLE
    post:
      summary: Add an operation for a transaction
      tags:
        - Operations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/paths/~1transactions~1%7Btransaction_id%7D~1operations/get/responses/2\
                01/content/application~1json/schema/properties/operations/items"
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    $ref: "#/components/schemas/Version"
                  operation:
                    $ref: "#/paths/~1transactions~1%7Btransaction_id%7D~1operations/get/responses/2\
                      01/content/application~1json/schema/properties/operations\
                      /items"
        "400":
          description: BAD_REQUEST
        "409":
          description: CONFLICT
        "500":
          description: SERVER_ERROR
        "503":
          description: SERVICE_UNAVAILABLE
  "/transactions/{transaction_id}/statuses":
    get:
      summary: Get a transaction's statuses
      tags:
        - Statuses
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    $ref: "#/components/schemas/Version"
                  statuses:
                    type: array
                    items:
                      $schema: http://json-schema.org/draft-07/schema#
                      type: object
                      properties:
                        transaction_id:
                          type: string
                          format: uuid
                        status_id:
                          type: string
                          format: uuid
                        timestamp:
                          type: integer
                          minimum: 100000000000
                          maximum: 99999999999999
                        status_type:
                          type: string
                          enum:
                            - order_submitted
                            - order_canceled
                            - order_complete
                            - order_incomplete
                        author:
                          type: string
                      required:
                        - author
                        - status_id
                        - status_type
                        - timestamp
                        - transaction_id
        "404":
          description: NOT_FOUND
        "500":
          description: SERVER_ERROR
        "503":
          description: SERVICE_UNAVAILABLE
    post:
      summary: Add a status for a transaction
      tags:
        - Statuses
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/paths/~1transactions~1%7Btransaction_id%7D~1operations/get/responses/2\
                01/content/application~1json/schema/properties/operations/items"
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    $ref: "#/components/schemas/Version"
                  status:
                    $ref: "#/paths/~1transactions~1%7Btransaction_id%7D~1statuses/get/responses/201\
                      /content/application~1json/schema/properties/statuses/ite\
                      ms"
        "400":
          description: BAD_REQUEST
        "409":
          description: CONFLICT
        "500":
          description: SERVER_ERROR
        "503":
          description: SERVICE_UNAVAILABLE
  /transactions/statuses:
    get:
      summary: Get a transaction's statuses
      tags:
        - Statuses
      parameters:
        - in: query
          name: transaction_id
          description: transaction_ids to get all statuses for
          schema:
            type: array
            items:
              type: string
              format: uuid
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    $ref: "#/components/schemas/Version"
                  statuses:
                    type: object
                    additionalProperties:
                      type: array
                      items:
                        $ref: "#/paths/~1transactions~1%7Btransaction_id%7D~1statuses/get/responses/201\
                          /content/application~1json/schema/properties/statuses\
                          /items"
        "404":
          description: NOT_FOUND
        "500":
          description: SERVER_ERROR
        "503":
          description: SERVICE_UNAVAILABLE
components:
  schemas:
    Version:
      description: Current API version
      type: number
      format: f32
      example:
        value: 0.0.1
    Timestamp:
      description: Timestamp in Milliseconds since Epoch
      type: integer
      format: i64
