{{- range $name, $api := .Values.apis }}
  {{- if $api.enabled }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $name }}
  labels:
    app: {{ $name }}
  namespace: {{ $.Release.Namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ $name }}
  template:
    metadata:
      labels:
        app: {{ $name }}
    spec:
      volumes:
        - name: mds-config-files
          configMap:
            name: mds-config-files
        - name: stan-creds-volume
          configMap:
            name: stans-creds
          # secret:
          #   secretName: stan-creds
      containers:
      - name: {{ $name }}
        {{- if $.Values.registry }}
        image: {{ $.Values.registry }}/{{ $name }}:{{ $api.version }}
        {{- else }}
        image: {{ $name }}:{{ $api.version }}
        imagePullPolicy: IfNotPresent
        {{- end }}
        resources:
          limits:
            cpu: {{ $api.resourcesLimitsCpu | default ($.Values.resourcesLimitsCpu | default "500m") }}
            memory: {{ $api.resourcesLimitsMemory | default ($.Values.resourcesLimitsMemory | default "512Mi") }}
          requests:
            cpu: {{ $api.resourcesRequestsCpu | default ($.Values.resourcesRequestsCpu | default "50m") }}
            memory: {{ $api.resourcesRequestsMemory | default ($.Values.resourcesRequestsMemory | default "128Mi") }}
        ports:
        - containerPort: 4000
          name: user-port
          protocol: TCP
        volumeMounts:
        - name: mds-config-files
          mountPath: /mds-config/
        - name: stan-creds-volume
          mountPath: /var/run/nats/creds/stan
        env:
          - name: PORT
            value: "4000"
          - name: PATH_PREFIX
            value: {{ $api.pathPrefix }}
          - name: TIMEZONE
            value: {{ $.Values.timezone }}
          - name: PG_USER
            value: {{ $.Values.postgresql.postgresqlUsername }}
          - name: PG_NAME
            value: {{ $.Values.postgresql.postgresqlDatabase }}
          - name: PG_PASS
            valueFrom:
              secretKeyRef:
                name: mds-secrets
                key: postgresql-password
          - name: PG_HOST
          {{- if $.Values.postgresql.internal }}
            value: {{ $.Release.Namespace }}-postgresql.{{ $.Release.Namespace }}.svc.cluster.local
          {{- else }}
            value: {{ $.Values.postgresql.host }}
          {{- end }}
          {{- if $.Values.postgresql.hostReader }}
          - name: PG_HOST_READER
            value: {{ $.Values.postgresql.hostReader }}
          {{- end }}
          {{- if $.Values.postgresql.port }}
          - name: PG_PORT
            value: {{ $.Values.postgresql.port | quote }}
          {{- end}}
          {{- if $api.migration }}
          - name: PG_MIGRATIONS
            value: {{ $api.migration | quote }}
          {{- end }}
          - name: REDIS_HOST
          {{- if $.Values.redis.internal }}
            value: {{ $.Release.Namespace }}-redis-master.{{ $.Release.Namespace }}.svc.cluster.local
          {{- else }}
            value: {{ $.Values.redis.host }}
          {{- end }}
          - name: REDIS_PORT
            value: {{ $.Values.redis.port | quote }}
          - name: EVENT_SOURCE
            value: cloudevents
          - name: CE_NAME
            value: {{ $name }}
          # - name: SINK
          #   value: http://natss-broker.{{ $.Release.Namespace }}.svc.cluster.local
          # - name: NATS
          #   value: nats-streaming-0.nats-streaming.natss.svc.cluster.local
          - name: STAN
            value: stan.{{ $.Release.Namespace | default "default" }}.svc.cluster.local
          - name: STAN_CLUSTER
            value: stan
          # - name: STAN_CREDS
          #   value: /var/run/nats/creds/stan/stan.creds
          {{- if not (empty $.Values.tenantId) }}
          - name: TENANT_ID
            value: {{ $.Values.tenantId }}
          {{- end }}
          {{- if $.Values.slack.channel }}
          - name: SLACK_CHANNEL
            value: {{ $.Values.slack.channel }}
          - name: SLACK_TOKEN
            valueFrom:
              secretKeyRef:
                name: mds-secrets
                key: slack-token
          {{- end }}
          {{- if $api.env }}
{{ toYaml $api.env | indent 10 }}
          {{- end }}
          {{- if hasKey $.Values "global" }}
          {{- if hasKey $.Values.global "env" }}
{{ toYaml $.Values.global.env | indent 10 }}
          {{- end }}
          {{- end }}
  {{- end }}
{{- end }}
---
apiVersion: v1
kind: Secret
metadata:
  name: mds-secrets
  namespace: {{ $.Release.Namespace }}
data:
  {{- if .Values.slack.channel }}
  slack-token: {{ .Values.slack.token | b64enc }}
  {{- end }}
  {{- if .Values.postgresql.password }}
  postgresql-password: {{ .Values.postgresql.password | b64enc }}
  {{- end }}
type: Opaque